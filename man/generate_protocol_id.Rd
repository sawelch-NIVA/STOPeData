% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mod_methods_fct_id.R
\name{generate_protocol_id}
\alias{generate_protocol_id}
\title{Generate Protocol ID ----}
\usage{
generate_protocol_id(
  protocol_type,
  protocol_name,
  sequence_number = 1,
  campaign_name = ""
)
}
\arguments{
\item{protocol_type}{Character vector. The category of protocol
(e.g., "Sampling Protocol", "Analytical Protocol"). Must match one of
the predefined categories or will default to "X".}

\item{protocol_name}{Character vector. The specific name/method within
the protocol category. Will be abbreviated and cleaned for ID generation.}

\item{sequence_number}{Numeric vector. Sequential number for protocols
within the same category. Defaults to 1. Will be zero-padded to 2 digits.}

\item{campaign_name}{Character vector. Name of the campaign/study.
Will be abbreviated to first 3 alphanumeric characters. Defaults to "".}
}
\value{
Character vector of protocol IDs with format:
  `{TypeCode}{SequenceNumber}_{AbbreviatedName}_{CampaignAbbrev}`

  Where:
  - TypeCode: S (Sampling), F (Fractionation), E (Extraction),
    A (Analytical), X (Unknown)
  - SequenceNumber: Zero-padded 2-digit number
  - AbbreviatedName: Up to 15 alphanumeric characters (optional)
  - CampaignAbbrev: Up to 3 alphanumeric characters (optional)
}
\description{
Generates a standardised protocol identifier based on protocol type, name,
sequence number, and campaign. The function is fully vectorised and can
handle multiple protocols simultaneously.
}
\details{
The function handles edge cases gracefully:
- NULL or empty values result in appropriate defaults
- Invalid protocol types default to "X"
- Names are cleaned of special characters and spaces
- Empty components are omitted from the final ID
}
\examples{
# Single protocol
generate_protocol_id("Sampling Protocol", "Water Sample", 1, "MyStudy")
# Returns: "S01_WaterSample_MyS"

# Multiple protocols (vectorised)
types <- c("Sampling Protocol", "Analytical Protocol")
names <- c("Water Sample", "LC-MS Analysis")
sequences <- c(1, 2)
generate_protocol_id(types, names, sequences, "Study2024")
# Returns: c("S01_WaterSample_Stu", "A02_LCMSAnalysis_Stu")

}
\concept{protocol_functions}
