% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mod_bookmark_manager.R
\name{mod_bookmark_manager_server}
\alias{mod_bookmark_manager_server}
\title{Bookmark Manager Server Functions ----#' Bookmark Manager Server Module}
\usage{
mod_bookmark_manager_server(id)
}
\arguments{
\item{id}{Character string. The module's namespace identifier.}

\item{metadata}{A tibble containing bookmark metadata to save}

\item{state_id}{Character string. The unique identifier of the bookmark to update.}
}
\value{
A Shiny module server function that manages bookmark operations and returns
reactive values for testing via \code{exportTestValues}.

A tibble containing bookmark metadata with columns: state_id, name, campaign_name_short,
reference_id, username, created_date, last_accessed, total_size_mb, description

Invisible NULL. Function called for side effects.

Invisible NULL. Function called for side effects.
}
\description{
Server-side logic for managing Shiny application bookmarks stored in Google Drive.
This module handles bookmark creation, loading, deletion, and metadata management
through Google Drive integration.

Loads bookmark metadata from Google Drive, creating empty structure if none exists.
Synchronizes metadata with actual bookmark folders and updates missing information.

Saves bookmark metadata to Google Drive and updates the session's reactive values.

Updates the last_accessed timestamp for a specific bookmark and saves metadata.

Renders a DT datatable displaying bookmark metadata with formatting for dates
and proper column alignment. Shows a message when no bookmarks exist.
}
\details{
This module requires the following environment variables to be set for Google Drive authentication:
\itemize{
  \item \code{GOOGLE_PROJECT_ID} - Google Cloud project ID
  \item \code{GOOGLE_PRIVATE_KEY_ID} - Service account private key ID
  \item \code{GOOGLE_PRIVATE_KEY} - Service account private key (with \\n escaped as \\\\n)
  \item \code{GOOGLE_CLIENT_EMAIL} - Service account email
  \item \code{GOOGLE_CLIENT_ID} - Service account client ID
}

The module creates and manages a "Saved Sessions" folder in Google Drive to store
bookmark data and metadata. Each bookmark is stored as a separate folder containing
the session state files.

This function:
\itemize{
  \item Downloads metadata.json from Google Drive bookmarks folder
  \item Creates metadata for new bookmark folders without metadata
  \item Removes metadata for deleted bookmark folders
  \item Calculates folder sizes and updates metadata
  \item Saves updated metadata back to Google Drive
}

This function writes metadata to a temporary JSON file, uploads it to Google Drive
(updating existing metadata file or creating new one), and updates the session's
reactive values for immediate UI updates.

This function finds the bookmark with the specified state_id, updates its
last_accessed timestamp to the current time, and saves the updated metadata.
}
\section{Reactive Values}{

The module uses \code{session$userData$reactiveValues$bookmarkedSessions} to store
the current bookmark metadata, which includes:
\itemize{
  \item \code{state_id} - Unique identifier for the bookmark
  \item \code{name} - User-friendly name for the session
  \item \code{campaign_name_short} - Associated campaign name
  \item \code{reference_id} - Reference identifier
  \item \code{username} - User who created the bookmark
  \item \code{created_date} - When the bookmark was created
  \item \code{last_accessed} - When the bookmark was last accessed
  \item \code{total_size_mb} - Size of bookmark data in MB
  \item \code{description} - Optional description
}
}

\section{Server Inputs}{

\itemize{
  \item \code{input$save_bookmark} - Trigger to save current session as bookmark
  \item \code{input$load_selected} - Trigger to load selected bookmark
  \item \code{input$bookmarks_table_rows_selected} - Selected rows in bookmarks table
}
}

\section{Server Outputs}{

\itemize{
  \item \code{output$bookmarks_table} - DT datatable displaying bookmark metadata
}
}

\examples{
\dontrun{
# In server.R
bookmark_manager_data <- mod_bookmark_manager_server("bookmark_manager_1")

# In ui.R
mod_bookmark_manager_ui("bookmark_manager_1")
}

}
\seealso{
\code{\link{mod_bookmark_manager_ui}} for the corresponding UI module
}
\keyword{Accessed}
\keyword{Bookmark}
\keyword{Drive}
\keyword{Google}
\keyword{Last}
\keyword{Metadata}
\keyword{Save}
\keyword{Time}
\keyword{Update}
\keyword{for}
\keyword{internal}
\keyword{to}
