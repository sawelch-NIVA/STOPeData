{
  "output": {
    "sites-sites_table": {
      "x": {
        "data": [
          {
            "SITE_CODE": "SITE_001",
            "SITE_NAME": "",
            "SITE_GEOGRAPHIC_FEATURE": "Not reported",
            "SITE_GEOGRAPHIC_FEATURE_SUB": "Not reported",
            "SITE_COORDINATE_SYSTEM": "WGS 84",
            "LATITUDE": null,
            "LONGITUDE": null,
            "COUNTRY": "",
            "AREA": "",
            "ALTITUDE_VALUE": null,
            "ALTITUDE_UNIT": "m",
            "ENTERED_BY": "Test McTesterson",
            "ENTERED_DATE": "2025-08-07",
            "SITE_COMMENT": ""
          }
        ],
        "rClass": "data.frame",
        "rColClasses": {
          "SITE_CODE": "character",
          "SITE_NAME": "character",
          "SITE_GEOGRAPHIC_FEATURE": "character",
          "SITE_GEOGRAPHIC_FEATURE_SUB": "character",
          "SITE_COORDINATE_SYSTEM": "character",
          "LATITUDE": "logical",
          "LONGITUDE": "logical",
          "COUNTRY": "character",
          "AREA": "character",
          "ALTITUDE_VALUE": "logical",
          "ALTITUDE_UNIT": "character",
          "ENTERED_BY": "character",
          "ENTERED_DATE": "character",
          "SITE_COMMENT": "character"
        },
        "rColnames": [
          "SITE_CODE",
          "SITE_NAME",
          "SITE_GEOGRAPHIC_FEATURE",
          "SITE_GEOGRAPHIC_FEATURE_SUB",
          "SITE_COORDINATE_SYSTEM",
          "LATITUDE",
          "LONGITUDE",
          "COUNTRY",
          "AREA",
          "ALTITUDE_VALUE",
          "ALTITUDE_UNIT",
          "ENTERED_BY",
          "ENTERED_DATE",
          "SITE_COMMENT"
        ],
        "rColHeaders": [
          "SITE_CODE",
          "SITE_NAME",
          "SITE_GEOGRAPHIC_FEATURE",
          "SITE_GEOGRAPHIC_FEATURE_SUB",
          "SITE_COORDINATE_SYSTEM",
          "LATITUDE",
          "LONGITUDE",
          "COUNTRY",
          "AREA",
          "ALTITUDE_VALUE",
          "ALTITUDE_UNIT",
          "ENTERED_BY",
          "ENTERED_DATE",
          "SITE_COMMENT"
        ],
        "rRowHeaders": null,
        "rDataDim": [
          1,
          14
        ],
        "selectCallback": true,
        "colHeaders": [
          "SITE_CODE",
          "SITE_NAME",
          "SITE_GEOGRAPHIC_FEATURE",
          "SITE_GEOGRAPHIC_FEATURE_SUB",
          "SITE_COORDINATE_SYSTEM",
          "LATITUDE",
          "LONGITUDE",
          "COUNTRY",
          "AREA",
          "ALTITUDE_VALUE",
          "ALTITUDE_UNIT",
          "ENTERED_BY",
          "ENTERED_DATE",
          "SITE_COMMENT"
        ],
        "rowHeaders": "1",
        "columns": [
          {
            "type": "text",
            "renderer": "function(instance, td, row, col, prop, value, cellProperties) {\n    Handsontable.renderers.TextRenderer.apply(this, arguments);\n    const isEmpty = value === null ||\n      value === undefined ||\n        value === '' ||\n          (typeof value === 'string' && value.trim() === '');\n\n    td.style.boxSizing = 'border-box';\n\n    if (isEmpty) {\n      td.className = 'htAutocomplete';\n      td.style.borderBottom = '2px solid #f9b928';\n    } else {\n      td.style.borderBottom = '2px solid #007416';\n      td.className = 'htAutocomplete';\n    }\n    return td;\n  }",
            "default": null
          },
          {
            "type": "text",
            "renderer": "function(instance, td, row, col, prop, value, cellProperties) {\n    Handsontable.renderers.TextRenderer.apply(this, arguments);\n    const isEmpty = value === null ||\n      value === undefined ||\n        value === '' ||\n          (typeof value === 'string' && value.trim() === '');\n\n    td.style.boxSizing = 'border-box';\n\n    if (isEmpty) {\n      td.className = 'htAutocomplete';\n      td.style.borderBottom = '2px solid #f9b928';\n    } else {\n      td.style.borderBottom = '2px solid #007416';\n      td.className = 'htAutocomplete';\n    }\n    return td;\n  }",
            "default": null
          },
          {
            "type": "dropdown",
            "renderer": "function(instance, td, row, col, prop, value, cellProperties) {\n    Handsontable.renderers.AutocompleteRenderer.apply(this, arguments);\n    const isEmpty = value === null ||\n      value === undefined ||\n        value === '' ||\n          (typeof value === 'string' && value.trim() === '');\n\n              td.style.boxSizing = 'border-box';\n\n        if (isEmpty) {\n          td.className = 'htAutocomplete';\n          td.style.borderBottom = '2px solid #f9b928';\n        } else {\n          td.style.borderBottom = '2px solid #007416';\n          td.className = 'htAutocomplete';\n        }\n        return td;\n  }",
            "default": null,
            "source": [
              "Not relevant",
              "Not reported",
              "River, stream, canal",
              "Lake, pond, pool, reservoir",
              "Ocean, sea, territorial waters",
              "Coastal, fjord",
              "Estuary",
              "Drainage, sewer, artificial water",
              "Swamp, wetland",
              "Groundwater, aquifer",
              "WWTP",
              "Artificial Land/Urban Areas",
              "Landfills",
              "Cropland",
              "Woodland, forest",
              "Shrubland",
              "Grassland",
              "Bare land and lichen/moss",
              "Other"
            ],
            "strict": true
          },
          {
            "type": "dropdown",
            "renderer": "function(instance, td, row, col, prop, value, cellProperties) {\n    Handsontable.renderers.AutocompleteRenderer.apply(this, arguments);\n    const isEmpty = value === null ||\n      value === undefined ||\n        value === '' ||\n          (typeof value === 'string' && value.trim() === '');\n\n              td.style.boxSizing = 'border-box';\n\n        if (isEmpty) {\n          td.className = 'htAutocomplete';\n          td.style.borderBottom = '2px solid #f9b928';\n        } else {\n          td.style.borderBottom = '2px solid #007416';\n          td.className = 'htAutocomplete';\n        }\n        return td;\n  }",
            "default": null,
            "source": [
              "Not relevant",
              "Not reported",
              "Water surface",
              "Water column, pelagic zone",
              "Water benthos",
              "Other"
            ],
            "strict": true
          },
          {
            "type": "dropdown",
            "renderer": "function(instance, td, row, col, prop, value, cellProperties) {\n    Handsontable.renderers.AutocompleteRenderer.apply(this, arguments);\n    const isEmpty = value === null ||\n      value === undefined ||\n        value === '' ||\n          (typeof value === 'string' && value.trim() === '');\n\n              td.style.boxSizing = 'border-box';\n\n        if (isEmpty) {\n          td.className = 'htAutocomplete';\n          td.style.borderBottom = '2px solid #f9b928';\n        } else {\n          td.style.borderBottom = '2px solid #007416';\n          td.className = 'htAutocomplete';\n        }\n        return td;\n  }",
            "default": null,
            "source": [
              "Not relevant",
              "Not reported",
              "WGS 84",
              "UTM 32",
              "UTM 33",
              "UTM 34",
              "UTM 35",
              "ETRS89",
              "Other"
            ],
            "strict": true
          },
          {
            "type": "numeric",
            "renderer": "function(instance, td, row, col, prop, value, cellProperties) {\n    Handsontable.renderers.TextRenderer.apply(this, arguments);\n    const isEmpty = value === null ||\n      value === undefined ||\n        value === '' ||\n          (typeof value === 'string' && value.trim() === '');\n\n    td.style.boxSizing = 'border-box';\n\n    if (isEmpty) {\n      td.className = 'htAutocomplete';\n      td.style.borderBottom = '2px solid #f9b928';\n    } else {\n      td.style.borderBottom = '2px solid #007416';\n      td.className = 'htAutocomplete';\n    }\n    return td;\n  }",
            "default": null,
            "numericFormat": {
              "pattern": "0.000000"
            }
          },
          {
            "type": "numeric",
            "renderer": "function(instance, td, row, col, prop, value, cellProperties) {\n    Handsontable.renderers.TextRenderer.apply(this, arguments);\n    const isEmpty = value === null ||\n      value === undefined ||\n        value === '' ||\n          (typeof value === 'string' && value.trim() === '');\n\n    td.style.boxSizing = 'border-box';\n\n    if (isEmpty) {\n      td.className = 'htAutocomplete';\n      td.style.borderBottom = '2px solid #f9b928';\n    } else {\n      td.style.borderBottom = '2px solid #007416';\n      td.className = 'htAutocomplete';\n    }\n    return td;\n  }",
            "default": null,
            "numericFormat": {
              "pattern": "0.000000"
            },
            "allowInvalid": false
          },
          {
            "type": "dropdown",
            "renderer": "customRenderer",
            "default": null,
            "source": [
              "Not relevant",
              "Not reported",
              "Norway",
              "Other"
            ],
            "strict": true
          },
          {
            "type": "dropdown",
            "renderer": "customRenderer",
            "default": null,
            "source": [
              "Not relevant",
              "Not reported",
              "Area 1",
              "Area 2",
              "Area 3",
              "Other"
            ],
            "strict": true
          },
          {
            "type": "numeric",
            "renderer": "function(instance, td, row, col, prop, value, cellProperties) {\n    Handsontable.renderers.TextRenderer.apply(this, arguments);\n    const isEmpty = value === null ||\n      value === undefined ||\n        value === '' ||\n          (typeof value === 'string' && value.trim() === '');\n\n    td.style.boxSizing = 'border-box';\n\n    if (isEmpty) {\n      td.className = 'htAutocomplete';\n      td.style.borderBottom = '2px solid #f9b928';\n    } else {\n      td.style.borderBottom = '2px solid #007416';\n      td.className = 'htAutocomplete';\n    }\n    return td;\n  }",
            "default": null,
            "allowInvalid": false
          },
          {
            "type": "dropdown",
            "renderer": "customRenderer",
            "default": null,
            "source": [
              "km",
              "m",
              "cm",
              "mm"
            ],
            "strict": true
          },
          {
            "type": "text",
            "renderer": "function(instance, td, row, col, prop, value, cellProperties) {\n    Handsontable.renderers.TextRenderer.apply(this, arguments);\n    const isEmpty = value === null ||\n      value === undefined ||\n        value === '' ||\n          (typeof value === 'string' && value.trim() === '');\n\n    td.style.boxSizing = 'border-box';\n\n    if (isEmpty) {\n      td.className = 'htAutocomplete';\n      td.style.borderBottom = '2px solid #f9b928';\n    } else {\n      td.style.borderBottom = '2px solid #007416';\n      td.className = 'htAutocomplete';\n    }\n    return td;\n  }",
            "default": null
          },
          {
            "type": "date",
            "renderer": "function(instance, td, row, col, prop, value, cellProperties) {\n    Handsontable.renderers.TextRenderer.apply(this, arguments);\n    const isEmpty = value === null ||\n      value === undefined ||\n        value === '' ||\n          (typeof value === 'string' && value.trim() === '');\n\n    td.style.boxSizing = 'border-box';\n\n    if (isEmpty) {\n      td.className = 'htAutocomplete';\n      td.style.borderBottom = '2px solid #f9b928';\n    } else {\n      td.style.borderBottom = '2px solid #007416';\n      td.className = 'htAutocomplete';\n    }\n    return td;\n  }",
            "default": null,
            "dateFormat": "YYYY-MM-DD",
            "allowInvalid": false
          },
          {
            "type": "text",
            "renderer": "customRenderer",
            "default": null
          }
        ],
        "width": null,
        "height": null,
        "debug": 0,
        "search": false,
        "stretchH": "none",
        "comments": true,
        "contextMenu": {
          "items": {
            "remove_row": {
              "name": "Remove selected rows"
            },
            "hsep3": {
              "name": "---------"
            },
            "undo": [

            ],
            "redo": [

            ],
            "hsep4": {
              "name": "---------"
            },
            "alignment": [

            ],
            "hsep1": {
              "name": "---------"
            }
          }
        },
        "overflow": "visible",
        "cell": [
          {
            "row": 0,
            "col": 0,
            "comment": {
              "value": "Site Code: A short, unique code identifying identify the site."
            }
          },
          {
            "row": 0,
            "col": 1,
            "comment": {
              "value": "Site Name: A longer site name identifying the site."
            }
          },
          {
            "row": 0,
            "col": 2,
            "comment": {
              "value": "Site Geographical Feature: The geographical category of the site."
            }
          },
          {
            "row": 0,
            "col": 3,
            "comment": {
              "value": "Site Geographical Sub-Feature: The geographical sub-category of the site."
            }
          },
          {
            "row": 0,
            "col": 4,
            "comment": {
              "value": "Coordinate System: The Coordinate Reference System (CRS) associated with the site longitude and latitude."
            }
          },
          {
            "row": 0,
            "col": 5,
            "comment": {
              "value": "Latitude: The site's latitude (northing, y axis, in decimal degrees)"
            }
          },
          {
            "row": 0,
            "col": 6,
            "comment": {
              "value": "Longitude: The site's longitude (easting, x axis, in decimal degrees)"
            }
          },
          {
            "row": 0,
            "col": 7,
            "comment": {
              "value": "Country: The country where the site was sampled."
            }
          },
          {
            "row": 0,
            "col": 8,
            "comment": {
              "value": "Area: The region where the site was sampled."
            }
          },
          {
            "row": 0,
            "col": 9,
            "comment": {
              "value": "Altitude: The sampling site's altitude above or below sea level."
            }
          },
          {
            "row": 0,
            "col": 10,
            "comment": {
              "value": "Altitude Unit: The unit associated with the site's reported altitude."
            }
          },
          {
            "row": 0,
            "col": 11,
            "comment": {
              "value": "Entered Data: The date this site is added to the database."
            }
          },
          {
            "row": 0,
            "col": 12,
            "comment": {
              "value": "Entered By: Your name or initials (autofilled from Campaign if available)."
            }
          },
          {
            "row": 0,
            "col": 13,
            "comment": {
              "value": "Site Comment: Any additional comments or relevant details about the site."
            }
          }
        ]
      },
      "evals": [
        "columns.0.renderer",
        "columns.1.renderer",
        "columns.2.renderer",
        "columns.3.renderer",
        "columns.4.renderer",
        "columns.5.renderer",
        "columns.6.renderer",
        "columns.7.renderer",
        "columns.8.renderer",
        "columns.9.renderer",
        "columns.10.renderer",
        "columns.11.renderer",
        "columns.12.renderer",
        "columns.13.renderer"
      ],
      "jsHooks": [

      ],
      "deps": [

      ]
    }
  }
}
